package net.openwatch.reporter.http;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.FileEntity;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import net.openwatch.reporter.constants.Constants;
import net.openwatch.reporter.model.OWLocalVideoRecording;
import net.openwatch.reporter.model.OWLocalVideoRecordingSegment;
import net.openwatch.reporter.model.OWVideoRecording;

import android.content.Context;
import android.net.http.AndroidHttpClient;
import android.util.Log;

import com.google.gson.Gson;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;

public class OWMediaRequests {

	private static final String TAG = "OWMediaServiceRequests";

	/**
	 * POSTs the start signal to the OW NodeMediaCapture Service
	 * 
	 * @param upload_token
	 *            the public upload token
	 * @param recording_id
	 *            recording id generated by client
	 * @param recording_start
	 *            when the recording started in unix time (seconds)
	 */
	public static void start(String upload_token, String recording_id,
			String recording_start) {
		AsyncHttpClient client = HttpClient.setupHttpClient();
		RequestParams params = new RequestParams();
		params.put(Constants.OW_REC_START, recording_start);
		String url = setupMediaURL(Constants.OW_MEDIA_START, upload_token,
				recording_id);
		Log.i(TAG, "sending start to " + url);
		client.post(url, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(String response) {
				Gson gson = new Gson();
				Map<Object, Object> map = new HashMap<Object, Object>();
				try {
					map = gson.fromJson(response, map.getClass());
				} catch (Throwable t) {
					Log.e(TAG, "Error parsing response. 500 error?");
					onFailure(new Throwable(), "Error parsing server response");
					return;
				}

				if ((Boolean) map.get(Constants.OW_SUCCESS) == true) {
					Log.i(TAG, "start signal success: " + map.toString());
					return;
				} else {
					Log.i(TAG, "start signal server error: " + map.toString());
				}

			}

			@Override
			public void onFailure(Throwable e, String response) {
				Log.i(TAG, "start signal failure: " + response);
			}

			@Override
			public void onFinish() {
				Log.i(TAG, "start signal finished");
			}

		});
	}

	/**
	 * POSTs a LQ video chunk to the OW MediaCapture Service
	 * 
	 * @param upload_token
	 *            the public upload token
	 * @param recording_id
	 *            the unique recording id generated by this client
	 * @param filename
	 *            the video file chunk to upload
	 */
	public static void sendLQChunk(String upload_token, String recording_id,
			String filename) {
		AsyncHttpClient client = HttpClient.setupHttpClient();
		File file = new File(filename);
		RequestParams params = new RequestParams();
		try {
			params.put(Constants.OW_FILE, file);
		} catch (FileNotFoundException e) {
			Log.e(TAG, filename + " not found");
			return;
		}
		String url = setupMediaURL(Constants.OW_MEDIA_UPLOAD, upload_token,
				recording_id);
		Log.i(TAG, "sending video chunk " + filename + " to " + url);
		client.post(url, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(String response) {
				Gson gson = new Gson();
				Map<Object, Object> map = new HashMap<Object, Object>();
				try {
					map = gson.fromJson(response, map.getClass());
				} catch (Throwable t) {
					Log.e(TAG, "Error parsing chunk response. 500 error?");
					onFailure(new Throwable(), "Error parsing server response");
					return;
				}

				if ((Boolean) map.get(Constants.OW_SUCCESS) == true) {
					Log.i(TAG, "chunk signal success: " + map.toString());
					return;
				} else {
					Log.i(TAG, "chunk signal server error: " + map.toString());
				}

			}

			@Override
			public void onFailure(Throwable e, String response) {
				Log.i(TAG, "chunk signal failure: " + response);
				e.printStackTrace();
			}

			@Override
			public void onFinish() {
				Log.i(TAG, "chunk signal finished");
			}

		});
	}

	/**
	 * POSTs an end signal to the OW MediaCapture Service
	 * 
	 * @param upload_token
	 * @param recording_id
	 * @param recording_start
	 * @param recording_end
	 * @param all_files
	 */
	public static void end(Context c, String upload_token,
			OWVideoRecording recording) {
		AsyncHttpClient client = HttpClient.setupHttpClient();
		// RequestParams params = initializeRequestParamsWithLocalRecording(c,
		// recording);
		// Log.i(TAG, "Sending all files: " +
		// recording.local.get(c).segmentsToJSONArray(c).toString());
		// params.put(Constants.OW_ALL_FILES,
		// recording.local.get(c).segmentsToJSONArray(c).toString() );
		String url = setupMediaURL(Constants.OW_MEDIA_END, upload_token,
				recording.uuid.get());
		Log.i(TAG, "sending end signal to " + url + " request body: "
				+ recording.local.get(c).toOWMediaServerJSON(c));
		client.post(c, url, Utils.JSONObjectToStringEntity(recording.local.get(
				c).toOWMediaServerJSON(c)), "application/json",
				new AsyncHttpResponseHandler() {

					@Override
					public void onSuccess(String response) {
						Gson gson = new Gson();
						Map<Object, Object> map = new HashMap<Object, Object>();
						try {
							map = gson.fromJson(response, map.getClass());
						} catch (Throwable t) {
							Log.e(TAG, "Error parsing response. 500 error?");
							onFailure(new Throwable(),
									"Error parsing server response");
							return;
						}

						if ((Boolean) map.get(Constants.OW_SUCCESS) == true) {
							Log.i(TAG, "end signal success: " + map.toString());
							return;
						} else {
							Log.i(TAG,
									"end signal server error: "
											+ map.toString());
						}

					}

					@Override
					public void onFailure(Throwable e, String response) {
						Log.i(TAG, "end signal failure: " + response);
						e.printStackTrace();
					}

				});
	}

	public static void updateMeta(Context c, String upload_token,
			OWVideoRecording recording) {
		AsyncHttpClient client = HttpClient.setupHttpClient();
		RequestParams params = initializeRequestParamsWithLocalRecording(c,
				recording);
		Log.i(TAG, "updateMeta: " + params.toString());
		String url = setupMediaURL(Constants.OW_MEDIA_UPDATE_META,
				upload_token, recording.uuid.get());

		client.post(url, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(String response) {
				Log.i(TAG, "got meta response " + response);

			}

			@Override
			public void onFailure(Throwable e, String response) {
				Log.i(TAG, "end signal failure: " + response);
				e.printStackTrace();
			}

		});
	}

	/**
	 * POST the hq video to the OW MediaCapture service
	 * 
	 * @param upload_token
	 * @param recording_id
	 * @param filename
	 */
	public static void sendHQFile(String upload_token, String recording_id,
			String filename) {
		AsyncHttpClient client = HttpClient.setupHttpClient();
		File file = new File(filename);
		RequestParams params = new RequestParams();
		try {
			params.put(Constants.OW_FILE, file);
		} catch (FileNotFoundException e) {
			Log.e(TAG, filename + " not found");
			return;
		}
		String url = setupMediaURL(Constants.OW_MEDIA_HQ_UPLOAD, upload_token,
				recording_id);
		Log.i(TAG, "sending hq video to " + url);
		client.post(url, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(String response) {
				Gson gson = new Gson();
				Map<Object, Object> map = new HashMap<Object, Object>();
				try {
					map = gson.fromJson(response, map.getClass());
				} catch (Throwable t) {
					Log.e(TAG, "Error parsing hq response. 500 error?");
					onFailure(new Throwable(), "Error parsing server response");
					return;
				}

				if ((Boolean) map.get(Constants.OW_SUCCESS) == true) {
					Log.i(TAG, "hq signal success: " + map.toString());
					return;
				} else {
					Log.i(TAG, "hq signal server error: " + map.toString());
				}

			}

			@Override
			public void onFailure(Throwable e, String response) {
				Log.i(TAG, "hq signal failure: " + response);
				e.printStackTrace();
			}

			@Override
			public void onFinish() {
				Log.i(TAG, "hq signal finished ");
			}

		});
	}

	public static void safeSendHQFile(Context c, String upload_token,
			String recording_id, String filename, int model_id) {
		safeSendFile(
				c,
				setupMediaURL(Constants.OW_MEDIA_HQ_UPLOAD, upload_token,
						recording_id), upload_token, recording_id, filename,
				true, model_id);
	}

	public static void safeSendLQFile(Context c, String upload_token,
			String recording_id, String filename, int segment_id) {
		safeSendFile(
				c,
				setupMediaURL(Constants.OW_MEDIA_UPLOAD, upload_token,
						recording_id), upload_token, recording_id, filename,
				false, segment_id);
	}

	/**
	 * Raw dog http post avoid reading entire file into memory
	 * 
	 * @param upload_token
	 * @param recording_id
	 * @param filename
	 */
	private static void safeSendFile(final Context c, final String urlStr,
			String upload_token, String recording_id, final String filename,
			final boolean is_HQ, final int model_id) {
		new Thread() {

			@Override
			public void run() {
				try {
					String response_string = urlHttpConnectionPost(c, filename, urlStr);
					Log.i(TAG, "urlHttpConnectionPost Response: " + response_string);
					if(response_string != null && response_string.compareTo("error")!= 0){
						JSONObject response = new JSONObject(response_string);
						if (response != null
								&& response.has(Constants.OW_SUCCESS)
								&& response.getString(Constants.OW_SUCCESS)
										.compareTo("true") == 0) {
							if (!is_HQ) {
								OWLocalVideoRecordingSegment segment = OWLocalVideoRecordingSegment
										.objects(c,
												OWLocalVideoRecordingSegment.class)
										.get(model_id);
								segment.uploaded.set(true);
								segment.save(c);
							} else {
								OWLocalVideoRecording local = OWLocalVideoRecording
										.objects(c, OWLocalVideoRecording.class)
										.get(model_id);
								local.hq_synced.set(true);
								if (local.areSegmentsSynced(c)) {
									local.lq_synced.set(true);
								}
								local.save(c);
							}
						}
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}.run();
	}


	private static String urlHttpConnectionPost(Context c, String filename, String targetUrl) {
		final String TAG = "urlHttpConnectionPost";
		Log.i(TAG, "SEND " + filename + " -TO- " + targetUrl);
	    String response = "error";
	    Log.i("filename", filename);
	    Log.i("url", targetUrl);
	    HttpsURLConnection connection = null;
	    DataOutputStream outputStream = null;
	    // DataInputStream inputStream = null;

	    String pathToOurFile = filename;
	    String urlServer = targetUrl;
	    String lineEnd = "\r\n";
	    String twoHyphens = "--";
	    String boundary = "*****";

	    int bytesRead, bytesAvailable, bufferSize;
	    byte[] buffer;
	    int maxBufferSize = 1 * 1024;
	    try {
	        FileInputStream fileInputStream = new FileInputStream(new File(
	                pathToOurFile));

	        connection = (HttpsURLConnection) HttpClient.setupHttpsUrlConnection(c, urlServer);

	        // Allow Inputs & Outputs
	        connection.setDoInput(true);
	        connection.setDoOutput(true);
	        connection.setUseCaches(false);
	        connection.setChunkedStreamingMode(1024);
	        // Enable POST method
	        connection.setRequestMethod("POST");
	        
	        bytesAvailable = fileInputStream.available();

	        connection.setRequestProperty("Connection", "Keep-Alive");
	        connection.setRequestProperty("Content-Type",
	                "multipart/form-data;boundary=" + boundary);
	        //connection.setRequestProperty("Content-Length", String.valueOf(bytesAvailable)); // This still results in server response: Length Required

	        outputStream = new DataOutputStream(connection.getOutputStream());
	        outputStream.writeBytes(twoHyphens + boundary + lineEnd);
	        
	       
	        String connstr = null;
	        connstr = "Content-Disposition: form-data; name=\"upload\";filename=\""
	                + pathToOurFile.substring(pathToOurFile.lastIndexOf(File.separator)+1) + "\";" + lineEnd;
	        //connstr +="Content-Length : " + bytesAvailable + ";" + lineEnd;
	        Log.i(TAG, "Headers: " + connstr);

	        outputStream.writeBytes(connstr);
	        outputStream.writeBytes(lineEnd);

	        bufferSize = Math.min(bytesAvailable, maxBufferSize);
	        buffer = new byte[bufferSize];

	        // Read file
	        bytesRead = fileInputStream.read(buffer, 0, bufferSize);
	        Log.i("File length", bytesAvailable + "");
	        try {
	            while (bytesRead > 0) {
	                try {
	                    outputStream.write(buffer, 0, bufferSize);
	                } catch (OutOfMemoryError e) {
	                	Log.e(TAG, "outOfMemory!");
	                    e.printStackTrace();
	                    response = "outofmemoryerror";
	                    fileInputStream.close();
	                    return response;
	                }
	                bytesAvailable = fileInputStream.available();
	                bufferSize = Math.min(bytesAvailable, maxBufferSize);
	                bytesRead = fileInputStream.read(buffer, 0, bufferSize);
	            }
	        } catch (Exception e) {
	        	Log.e(TAG, "Error while writing bytes to outputstream!");
	            e.printStackTrace();
	            response = "error";
	            fileInputStream.close();
	            return response;
	        }
	        outputStream.writeBytes(lineEnd);
	        outputStream.writeBytes(twoHyphens + boundary + twoHyphens
	                + lineEnd);

	        // Responses from the server (code and message)
	        int serverResponseCode = connection.getResponseCode();
	        String serverResponseMessage = connection.getResponseMessage();
	        Log.i(TAG, "Server Response Code " + serverResponseCode);
	        Log.i(TAG, "Server Response Message "+ serverResponseMessage);

	        if (serverResponseCode == 200) {
	            response = "true";
	        }

	        String CDate = null;

	        Log.i("Server Response Time", CDate + "");

	        filename = CDate
	                + filename.substring(filename.lastIndexOf("."),
	                        filename.length());
	        Log.i("File Name in Server : ", filename);

	        fileInputStream.close();
	        outputStream.flush();
	        outputStream.close();
	        outputStream = null;
	        return serverResponseMessage;
	    } catch (Exception ex) {
	        // Exception handling
	        response = "error";
	        Log.e("Send file Exception", ex.getMessage() + "");
	        ex.printStackTrace();
	    }
	    return null;
	}

	private static String setupMediaURL(String endpoint,
			String public_upload_token, String recording_id) {
		return Constants.OW_MEDIA_URL + endpoint + "/" + public_upload_token
				+ "/" + recording_id;
	}

	/**
	 * Deprecated. Use OWLocalVideoRecording.toOWMediaServerJSON
	 * 
	 * @param c
	 * @param recording
	 * @return
	 */
	private static RequestParams initializeRequestParamsWithLocalRecording(
			Context c, OWVideoRecording recording) {
		RequestParams params = new RequestParams();
		if (recording.begin_lat.get() != 0) {
			Log.i(TAG, "sending START GEO: "
					+ recording.begin_lat.get().toString() + ", "
					+ recording.begin_lon.get().toString());
			params.put(Constants.OW_START_LOC + "[" + Constants.OW_LAT + "]",
					recording.begin_lat.get().toString());
			params.put(Constants.OW_START_LOC + "[" + Constants.OW_LON + "]",
					recording.begin_lon.get().toString());

		}
		if (recording.end_lat.get() != 0) {
			Log.i(TAG, "sending END GEO: " + recording.end_lat.get().toString()
					+ ", " + recording.end_lon.get().toString());
			params.put(Constants.OW_END_LOC + "[" + Constants.OW_LAT + "]",
					recording.end_lat.get().toString());
			params.put(Constants.OW_END_LOC + "[" + Constants.OW_LON + "]",
					recording.end_lon.get().toString());

		}
		if (recording.getTitle(c) != null
				&& recording.getTitle(c).compareTo("") != 0) {
			params.put(Constants.OW_MEDIA_TITLE, recording.getTitle(c));
		}
		if (recording.getDescription(c) != null) {
			params.put(Constants.OW_DESCRIPTION, recording.getDescription(c));
		}
		return params;
	}

}
