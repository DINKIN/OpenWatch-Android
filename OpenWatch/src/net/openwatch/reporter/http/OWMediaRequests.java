package net.openwatch.reporter.http;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.FileEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import net.openwatch.reporter.constants.Constants;
import net.openwatch.reporter.model.OWLocalVideoRecording;
import net.openwatch.reporter.model.OWLocalVideoRecordingSegment;
import net.openwatch.reporter.model.OWVideoRecording;

import android.content.Context;
import android.net.http.AndroidHttpClient;
import android.util.Log;

import com.google.gson.Gson;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;

public class OWMediaRequests {

	private static final String TAG = "OWMediaServiceRequests";

	/**
	 * POSTs the start signal to the OW NodeMediaCapture Service
	 * 
	 * @param upload_token
	 *            the public upload token
	 * @param recording_id
	 *            recording id generated by client
	 * @param recording_start
	 *            when the recording started in unix time (seconds)
	 */
	public static void start(Context c, String upload_token, String recording_id,
			String recording_start) {
		AsyncHttpClient client = HttpClient.setupAsyncHttpClient(c);
		RequestParams params = new RequestParams();
		params.put(Constants.OW_REC_START, recording_start);
		String url = setupMediaURL(Constants.OW_MEDIA_START, upload_token,
				recording_id);
		Log.i(TAG, "sending start to " + url);
		client.post(url, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(String response) {
				Gson gson = new Gson();
				Map<Object, Object> map = new HashMap<Object, Object>();
				try {
					map = gson.fromJson(response, map.getClass());
				} catch (Throwable t) {
					Log.e(TAG, "Error parsing response. 500 error?");
					onFailure(new Throwable(), "Error parsing server response");
					return;
				}

				if ((Boolean) map.get(Constants.OW_SUCCESS) == true) {
					Log.i(TAG, "start signal success: " + map.toString());
					return;
				} else {
					Log.i(TAG, "start signal server error: " + map.toString());
				}

			}

			@Override
			public void onFailure(Throwable e, String response) {
				Log.i(TAG, "start signal failure: " + response);
			}

			@Override
			public void onFinish() {
				Log.i(TAG, "start signal finished");
			}

		});
	}

	

	/**
	 * POSTs an end signal to the OW MediaCapture Service
	 * 
	 * @param upload_token
	 * @param recording_id
	 * @param recording_start
	 * @param recording_end
	 * @param all_files
	 */
	public static void end(Context c, String upload_token,
			OWVideoRecording recording) {
		AsyncHttpClient client = HttpClient.setupAsyncHttpClient(c);
		// RequestParams params = initializeRequestParamsWithLocalRecording(c,
		// recording);
		// Log.i(TAG, "Sending all files: " +
		// recording.local.get(c).segmentsToJSONArray(c).toString());
		// params.put(Constants.OW_ALL_FILES,
		// recording.local.get(c).segmentsToJSONArray(c).toString() );
		String url = setupMediaURL(Constants.OW_MEDIA_END, upload_token,
				recording.uuid.get());
		Log.i(TAG, "sending end signal to " + url + " request body: "
				+ recording.local.get(c).toOWMediaServerJSON(c));
		client.post(c, url, Utils.JSONObjectToStringEntity(recording.local.get(
				c).toOWMediaServerJSON(c)), "application/json",
				new AsyncHttpResponseHandler() {

					@Override
					public void onSuccess(String response) {
						Gson gson = new Gson();
						Map<Object, Object> map = new HashMap<Object, Object>();
						try {
							map = gson.fromJson(response, map.getClass());
						} catch (Throwable t) {
							Log.e(TAG, "Error parsing response. 500 error?");
							onFailure(new Throwable(),
									"Error parsing server response");
							return;
						}

						if ((Boolean) map.get(Constants.OW_SUCCESS) == true) {
							Log.i(TAG, "end signal success: " + map.toString());
							return;
						} else {
							Log.i(TAG,
									"end signal server error: "
											+ map.toString());
						}

					}

					@Override
					public void onFailure(Throwable e, String response) {
						Log.i(TAG, "end signal failure: " + response);
						e.printStackTrace();
					}

				});
	}

	public static void updateMeta(Context c, String upload_token,
			OWVideoRecording recording) {
		AsyncHttpClient client = HttpClient.setupAsyncHttpClient(c);
		RequestParams params = initializeRequestParamsWithLocalRecording(c,
				recording);
		Log.i(TAG, "updateMeta: " + params.toString());
		String url = setupMediaURL(Constants.OW_MEDIA_UPDATE_META,
				upload_token, recording.uuid.get());

		client.post(url, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(String response) {
				Log.i(TAG, "got meta response " + response);

			}

			@Override
			public void onFailure(Throwable e, String response) {
				Log.i(TAG, "end signal failure: " + response);
				e.printStackTrace();
			}

		});
	}

	public static void safeSendHQFile(Context c, String upload_token,
			String recording_id, String filename, int model_id) {
		safeSendFile(
				c,
				setupMediaURL(Constants.OW_MEDIA_HQ_UPLOAD, upload_token,
						recording_id), upload_token, recording_id, filename,
				true, model_id);
	}

	public static void safeSendLQFile(Context c, String upload_token,
			String recording_id, String filename, int segment_id) {
		safeSendFile(
				c,
				setupMediaURL(Constants.OW_MEDIA_UPLOAD, upload_token,
						recording_id), upload_token, recording_id, filename,
				false, segment_id);
	}

	/**
	 * Raw dog http post avoid reading entire file into memory
	 * 
	 * @param upload_token
	 * @param recording_id
	 * @param filename
	 */
	private static void safeSendFile(final Context c, final String urlStr,
			String upload_token, String recording_id, final String filename,
			final boolean is_HQ, final int model_id) {
		new Thread() {

			@Override
			public void run() {
				try {
					String response_string = ApacheFilePost(c, urlStr, filename);
					Log.i(TAG, "urlHttpConnectionPost Response: " + response_string);
					if(response_string != null && response_string.compareTo("error")!= 0){
						JSONObject response = new JSONObject(response_string);
						if (response != null
								&& response.has(Constants.OW_SUCCESS)
								&& response.getString(Constants.OW_SUCCESS)
										.compareTo("true") == 0) {
							if (!is_HQ) {
								OWLocalVideoRecordingSegment segment = OWLocalVideoRecordingSegment
										.objects(c,
												OWLocalVideoRecordingSegment.class)
										.get(model_id);
								segment.uploaded.set(true);
								segment.save(c);
							} else {
								OWLocalVideoRecording local = OWLocalVideoRecording
										.objects(c, OWLocalVideoRecording.class)
										.get(model_id);
								local.hq_synced.set(true);
								if (local.areSegmentsSynced(c)) {
									local.lq_synced.set(true);
								}
								local.save(c);
							}
						}
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}.run();
	}
	
	public static String ApacheFilePost(Context c, String url, String filename, String post_key) throws ParseException, ClientProtocolException, IOException{
		final String TAG = "ApacheFilePost";
		Log.i(TAG, "url " + url + " filename " + filename);
		DefaultHttpClient client = HttpClient.setupDefaultHttpClient(c);
		HttpPost        post   = new HttpPost( url );
		
		if(HttpClient.USER_AGENT != null)
			post.setHeader("User-Agent", HttpClient.USER_AGENT);

		MultipartEntity entity = new MultipartEntity( HttpMultipartMode.BROWSER_COMPATIBLE );

		// For File parameters
		FileBody fileBody = new FileBody(new File(filename));
		entity.addPart(post_key, fileBody);

		post.setEntity( entity );

		// Here we go!
		String response = EntityUtils.toString( client.execute( post ).getEntity(), "UTF-8" );
		Log.i(TAG, "response: " + response);
		client.getConnectionManager().shutdown();
		
		return response;
	}
	
	/**
	 * I love Apache!
	 * @param url
	 * @param filename
	 * @return
	 * @throws ParseException
	 * @throws ClientProtocolException
	 * @throws IOException
	 */
	public static String ApacheFilePost(Context c, String url, String filename) throws ParseException, ClientProtocolException, IOException{
		return ApacheFilePost(c, url, filename, "upload");
	}

	private static String setupMediaURL(String endpoint,
			String public_upload_token, String recording_id) {
		return Constants.OW_MEDIA_URL + endpoint + "/" + public_upload_token
				+ "/" + recording_id;
	}

	/**
	 * Deprecated. Use OWLocalVideoRecording.toOWMediaServerJSON
	 * 
	 * @param c
	 * @param recording
	 * @return
	 */
	private static RequestParams initializeRequestParamsWithLocalRecording(
			Context c, OWVideoRecording recording) {
		RequestParams params = new RequestParams();
		if (recording.begin_lat.get() != 0) {
			Log.i(TAG, "sending START GEO: "
					+ recording.begin_lat.get().toString() + ", "
					+ recording.begin_lon.get().toString());
			params.put(Constants.OW_START_LOC + "[" + Constants.OW_LAT + "]",
					recording.begin_lat.get().toString());
			params.put(Constants.OW_START_LOC + "[" + Constants.OW_LON + "]",
					recording.begin_lon.get().toString());

		}
		if (recording.end_lat.get() != 0) {
			Log.i(TAG, "sending END GEO: " + recording.end_lat.get().toString()
					+ ", " + recording.end_lon.get().toString());
			params.put(Constants.OW_END_LOC + "[" + Constants.OW_LAT + "]",
					recording.end_lat.get().toString());
			params.put(Constants.OW_END_LOC + "[" + Constants.OW_LON + "]",
					recording.end_lon.get().toString());

		}
		if (recording.getTitle(c) != null
				&& recording.getTitle(c).compareTo("") != 0) {
			params.put(Constants.OW_MEDIA_TITLE, recording.getTitle(c));
		}
		if (recording.getDescription(c) != null) {
			params.put(Constants.OW_DESCRIPTION, recording.getDescription(c));
		}
		return params;
	}

}
